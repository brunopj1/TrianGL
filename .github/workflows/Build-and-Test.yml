name: Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  run:
    runs-on: windows-latest

    steps:

      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Setup Premake
      - name: Setup Premake
        uses: abel0b/setup-premake@v2.4
        with:
          version: "5.0.0-beta2"

      # Run Premake
      - name: Run premake
        run: premake5 vs2022

      # Setup MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # Run MSBuild
      - name: Run MSBuild
        run: msbuild TrianGL.sln -t:rebuild -verbosity:n -property:Configuration=Debug -property:Platform=Win64
      
      # Install Mesa
      - name: Install Mesa
        shell: cmd
        run: |
          curl.exe -L --output mesa.7z --url https://github.com/pal1000/mesa-dist-win/releases/download/20.3.2/mesa3d-20.3.2-release-msvc.7z
          "C:\Program Files\7-Zip\7z.exe" x mesa.7z
          mklink opengl32.dll "x64\opengl32.dll"
          mklink libglapi.dll "x64\libglapi.dll"
        working-directory: Bin\Debug\Win64\Tests\

      # Start the Audio Service
      - name: Start the Audio Service
        run: net start audiosrv

      # Install Scream
      - name: Install Scream
        shell: powershell
        run: |
          Start-Service audio*
          Invoke-WebRequest https://github.com/duncanthrax/scream/releases/download/3.6/Scream3.6.zip -OutFile C:\Scream3.6.zip
          Extract-7Zip -Path C:\Scream3.6.zip -DestinationPath C:\Scream
          $cert = (Get-AuthenticodeSignature C:\Scream\Install\driver\Scream.sys).SignerCertificate
          $store = [System.Security.Cryptography.X509Certificates.X509Store]::new("TrustedPublisher", "LocalMachine")
          $store.Open("ReadWrite")
          $store.Add($cert)
          $store.Close()
          cd C:\Scream\Install\driver
          C:\Scream\Install\helpers\devcon install Scream.inf *Scream

      # Run Tests
      - name: Run Tests
        run: Bin\Debug\Win64\Tests\Tests.exe

      # Setup OpenCppCoverage
      - name: Setup OpenCppCoverage
        run: |
          choco install OpenCppCoverage -y
          echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH

      # Run OpenCppCoverage
      - name: Run OpenCppCoverage
        run: OpenCppCoverage --cover_children --sources=Engine\Source Bin\Debug\Win64\Tests\Tests.exe

      # Check the coverage
      - name: Check the coverage
        run: python .github\workflows\check-code-coverage.py